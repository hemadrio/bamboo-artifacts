name: KLMN Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-test-publish:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Azure CLI Script
        env:
          AZURE_SUBSCRIPTION_ID: 12345678-1234-1234-1234-123456789abc
          AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          AZURE_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
          AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
        run: |
          #!/bin/bash
          RESOURCE_GROUP="testResourceGroup"
          LOCATION="eastus"
          STORAGE_ACCOUNT_NAME="teststorageaccount$RANDOM"
          CONTAINER_NAME="testcontainer"
          VNET_NAME="testVnet"
          SUBNET_NAME="testSubnet"
          ADDRESS_PREFIX="10.1.0.0/16"
          SUBNET_PREFIX="10.1.0.0/24"
          VM_NAME="testVM"
          VM_SIZE="Standard_B1s"
          ADMIN_USERNAME="azureuser"
          ADMIN_PASSWORD="ComplexPassword123!"

          az login --service-principal -u $AZURE_CLIENT_ID -p $AZURE_CLIENT_SECRET --tenant $AZURE_TENANT_ID
          az account set --subscription $AZURE_SUBSCRIPTION_ID
          az group create --name $RESOURCE_GROUP --location $LOCATION
          az storage account create --name $STORAGE_ACCOUNT_NAME --resource-group $RESOURCE_GROUP --location $LOCATION --sku Standard_LRS --enable-hierarchical-namespace true --allow-blob-public-access false --kind StorageV2
          STORAGE_KEY=$(az storage account keys list --resource-group $RESOURCE_GROUP --account-name $STORAGE_ACCOUNT_NAME --query "[0].value" -o tsv)
          az storage container create --name $CONTAINER_NAME --account-name $STORAGE_ACCOUNT_NAME --account-key $STORAGE_KEY
          az network vnet create --resource-group $RESOURCE_GROUP --name $VNET_NAME --address-prefix $ADDRESS_PREFIX --subnet-name $SUBNET_NAME --subnet-prefix $SUBNET_PREFIX
          az vm create --resource-group $RESOURCE_GROUP --name $VM_NAME --image UbuntuLTS --size $VM_SIZE --admin-username $ADMIN_USERNAME --admin-password $ADMIN_PASSWORD --vnet-name $VNET_NAME --subnet $SUBNET_NAME --generate-ssh-keys
          NSG_NAME="${VM_NAME}NSG"
          az network nsg rule create --resource-group $RESOURCE_GROUP --nsg-name $NSG_NAME --name SSHAllowRule --priority 1001 --protocol Tcp --destination-port-range 22 --access Allow
          STORAGE_ACCOUNT_ID=$(az storage account show --name $STORAGE_ACCOUNT_NAME --resource-group $RESOURCE_GROUP --query "id" -o tsv)
          az role assignment create --assignee $AZURE_CLIENT_ID --role "Storage Blob Data Contributor" --scope $STORAGE_ACCOUNT_ID

      - name: AWS CLI Script
        env:
          AWS_REGION: us-east-1
          AWS_PROFILE: test-profile
        run: |
          #!/bin/bash
          RESOURCE_TAG="BambooTestResource"
          VPC_NAME="TestVPC"
          SUBNET_NAME="TestSubnet"
          SECURITY_GROUP_NAME="TestSecurityGroup"
          INSTANCE_TYPE="t2.micro"
          KEY_NAME="TestKeyPair"
          S3_BUCKET_NAME="test-bamboo-s3-bucket-$RANDOM"

          aws configure set region $AWS_REGION --profile $AWS_PROFILE
          aws s3api create-bucket --bucket $S3_BUCKET_NAME --region $AWS_REGION --create-bucket-configuration LocationConstraint=$AWS_REGION
          aws s3api put-public-access-block --bucket $S3_BUCKET_NAME --public-access-block-configuration BlockPublicAcls=true,IgnorePublicAcls=true,BlockPublicPolicy=true,RestrictPublicBuckets=true
          VPC_ID=$(aws ec2 create-vpc --cidr-block 10.0.0.0/16 --query 'Vpc.VpcId' --output text --profile $AWS_PROFILE)
          aws ec2 create-tags --resources $VPC_ID --tags Key=Name,Value=$VPC_NAME --profile $AWS_PROFILE
          SUBNET_ID=$(aws ec2 create-subnet --vpc-id $VPC_ID --cidr-block 10.0.1.0/24 --query 'Subnet.SubnetId' --output text --profile $AWS_PROFILE)
          SECURITY_GROUP_ID=$(aws ec2 create-security-group --group-name $SECURITY_GROUP_NAME --description "Security group for SSH access" --vpc-id $VPC_ID --query 'GroupId' --output text --profile $AWS_PROFILE)
          aws ec2 authorize-security-group-ingress --group-id $SECURITY_GROUP_ID --protocol tcp --port 22 --cidr 0.0.0.0/0 --profile $AWS_PROFILE
          aws ec2 run-instances --image-id ami-1234567890abcdef0 --instance-type $INSTANCE_TYPE --key-name $KEY_NAME --security-group-ids $SECURITY_GROUP_ID --subnet-id $SUBNET_ID --tag-specifications "ResourceType=instance,Tags=[{Key=Name,Value=$RESOURCE_TAG}]" --profile $AWS_PROFILE

      - name: GCP CLI Script
        env:
          GOOGLE_APPLICATION_CREDENTIALS: ${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}
        run: |
          #!/bin/bash
          PROJECT_ID="test-project"
          ZONE="us-central1-a"
          NETWORK_NAME="test-network"
          SUBNET_NAME="test-subnet"
          VM_NAME="test-vm"
          MACHINE_TYPE="n1-standard-1"
          BUCKET_NAME="test-bamboo-bucket-$RANDOM"

          gcloud auth activate-service-account --key-file="$GOOGLE_APPLICATION_CREDENTIALS"
          gcloud config set project $PROJECT_ID
          gcloud storage buckets create gs://$BUCKET_NAME --project $PROJECT_ID --location $ZONE --uniform-bucket-level-access
          gcloud compute networks create $NETWORK_NAME --subnet-mode=custom
          gcloud compute networks subnets create $SUBNET_NAME --network=$NETWORK_NAME --range=10.0.1.0/24 --region=$ZONE
          gcloud compute firewall-rules create allow-ssh --network $NETWORK_NAME --allow tcp:22
          gcloud compute instances create $VM_NAME --zone=$ZONE --machine-type=$MACHINE_TYPE --subnet=$SUBNET_NAME --tags=http-server,https-server --metadata=startup-script='#!/bin/bash
echo "Hello, World!" > /var/www/html/index.html' --image-family=debian-10 --image-project=debian-cloud

      - name: Update Build Status
        run: |
          curl -v POST "${{ secrets.GITHUB_WEBHOOK_URL }}" \
                --header 'Accept: application/vnd.github+json' \
                --header 'x-github-token: ${{ secrets.GITHUB_TOKEN }}' \
                --header 'Content-Type: application/json' \
                --data "{
                  \"event_type\": \"build_status\",
                  \"client_payload\": {
                    \"build_result_url\": \"https://bamboo.air-watch.com/browse/${{ github.event.repository.full_name }}\",
                    \"context\": \"${{ github.event.repository.name }}\",
                    \"commit_id\": \"${{ github.sha }}\",
                    \"build_status\": \"InProgress\",
                    \"build_plan_key\": \"${{ github.event.workflow_run.id }}\",
                    \"build_number\": \"${{ github.run_number }}\",
                    \"git_url\": \"${{ github.event.repository.clone_url }}\"
                  }
                }"

      - name: Build Docker Image and Save as Artifact
        run: |
          IMAGE_NAME="my-complex-image"
          TAG="latest"

          docker build -t $IMAGE_NAME:$TAG .
          IMAGE_TAR="$IMAGE_NAME-$TAG.tar"
          docker save -o $IMAGE_TAR $IMAGE_NAME:$TAG

          if [ -f "$IMAGE_TAR" ]; then
              echo "Docker image saved successfully: $IMAGE_TAR"
          else
              echo "Error: Failed to save Docker image."
              exit 1
          fi

      - name: Upload Docker Image Artifact
        uses: actions/upload-artifact@v4
        with:
          name: docker-image-artifact
          path: my-complex-image-latest.tar

      - name: Download Docker Image Artifact
        uses: actions/download-artifact@v4
        with:
          name: docker-image-artifact
          path: ./

      - name: Use Docker Image Artifact
        run: |
          IMAGE_NAME="my-complex-image"
          TAG="latest"
          IMAGE_TAR="$IMAGE_NAME-$TAG.tar"

          docker load -i $IMAGE_TAR
          docker run -d --name "$IMAGE_NAME-container" $IMAGE_NAME:$TAG
          docker ps -f "name=$IMAGE_NAME-container"

      - name: Docker Complex Operations
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
        run: |
          IMAGE_NAME="my-complex-image"
          REGISTRY_URL="docker.io/$DOCKER_USERNAME"
          TAG=$(date +%Y%m%d%H%M)
          CACHE_IMAGE="$REGISTRY_URL/$IMAGE_NAME:cache"

          echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin
          docker pull "$CACHE_IMAGE" || echo "No cache image found. Starting fresh build."
          docker build --target builder -t "$IMAGE_NAME:builder" . --cache-from "$CACHE_IMAGE" --build-arg CACHEBUST=$(date +%s)
          docker run --rm "$IMAGE_NAME:builder" ./run-tests.sh || { echo "Tests failed"; exit 1; }
          docker build --target final -t "$IMAGE_NAME:$TAG" -t "$IMAGE_NAME:latest" --cache-from "$CACHE_IMAGE" .
          docker tag "$IMAGE_NAME:$TAG" "$REGISTRY_URL/$IMAGE_NAME:$TAG"
          docker tag "$IMAGE_NAME:latest" "$REGISTRY_URL/$IMAGE_NAME:latest"
          docker push "$REGISTRY_URL/$IMAGE_NAME:$TAG"
          docker push "$REGISTRY_URL/$IMAGE_NAME:latest"
          docker image prune -f
          docker rmi "$(docker images -f 'dangling=true' -q)"
          docker-compose -f docker-compose.prod.yml up -d --build
          docker-compose -f docker-compose.prod.yml ps || { echo "Some containers failed to start"; exit 1; }
          docker-compose -f docker-compose.prod.yml logs > docker_logs_$(date +%Y%m%d%H%M).log
          docker-compose -f docker-compose.prod.yml down -v
          docker logout
