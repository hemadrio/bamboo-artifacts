name: KLMN Pipeline
on:
  push:
    branches:
      - main
  workflow_dispatch:
jobs:
  build-test-publish:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4.1.0

      - name: Azure CLI Script Execution
        env:
          AZURE_SUBSCRIPTION_ID: 12345678-1234-1234-1234-123456789abc
          RESOURCE_GROUP: testResourceGroup
          LOCATION: eastus
          STORAGE_ACCOUNT_NAME: teststorageaccount${{ github.run_id }}
          AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          AZURE_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
          AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
        run: |
          az login --service-principal -u $AZURE_CLIENT_ID -p $AZURE_CLIENT_SECRET --tenant $AZURE_TENANT_ID
          az account set --subscription $AZURE_SUBSCRIPTION_ID
          az group create --name $RESOURCE_GROUP --location $LOCATION
          az storage account create --name $STORAGE_ACCOUNT_NAME --resource-group $RESOURCE_GROUP --location $LOCATION --sku Standard_LRS --enable-hierarchical-namespace true --allow-blob-public-access false --kind StorageV2
          STORAGE_KEY=$(az storage account keys list --resource-group $RESOURCE_GROUP --account-name $STORAGE_ACCOUNT_NAME --query "[0].value" -o tsv)
          az storage container create --name testcontainer --account-name $STORAGE_ACCOUNT_NAME --account-key $STORAGE_KEY

      - name: AWS CLI Script Execution
        env:
          AWS_REGION: us-east-1
          AWS_PROFILE: test-profile
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          aws configure set region $AWS_REGION --profile $AWS_PROFILE
          S3_BUCKET_NAME=test-bamboo-s3-bucket-${{ github.run_id }}
          aws s3api create-bucket --bucket $S3_BUCKET_NAME --region $AWS_REGION --create-bucket-configuration LocationConstraint=$AWS_REGION
          aws s3api put-public-access-block --bucket $S3_BUCKET_NAME --public-access-block-configuration BlockPublicAcls=true,IgnorePublicAcls=true,BlockPublicPolicy=true,RestrictPublicBuckets=true
          VPC_ID=$(aws ec2 create-vpc --cidr-block 10.0.0.0/16 --query 'Vpc.VpcId' --output text --profile $AWS_PROFILE)
          aws ec2 create-tags --resources $VPC_ID --tags Key=Name,Value=TestVPC --profile $AWS_PROFILE

      - name: Google Cloud CLI Script Execution
        env:
          GOOGLE_APPLICATION_CREDENTIALS: ${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}
          PROJECT_ID: test-project
          ZONE: us-central1-a
        run: |
          gcloud auth activate-service-account --key-file="$GOOGLE_APPLICATION_CREDENTIALS"
          gcloud config set project $PROJECT_ID
          BUCKET_NAME=test-bamboo-bucket-${{ github.run_id }}
          gcloud storage buckets create gs://$BUCKET_NAME --project $PROJECT_ID --location $ZONE --uniform-bucket-level-access
          gcloud compute networks create test-network --subnet-mode=custom
          gcloud compute networks subnets create test-subnet --network=test-network --range=10.0.1.0/24 --region=$ZONE

  update-build-status:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4.1.0

      - name: Update Build Status
        env:
          GITHUB_WEBHOOK_URL: ${{ secrets.GITHUB_WEBHOOK_URL }}
          SVC_BOT_WS1_GITHUB_TOKEN: ${{ secrets.SVC_BOT_WS1_GITHUB_TOKEN }}
        run: |
          curl -v POST "$GITHUB_WEBHOOK_URL" \
          --header 'Accept: application/vnd.github+json' \
          --header "x-github-token: $SVC_BOT_WS1_GITHUB_TOKEN" \
          --header 'Content-Type: application/json' \
          --data "{\
            \"event_type\": \"build_status\",\
            \"client_payload\": {\
              \"build_result_url\": \"https://bamboo.air-watch.com/browse/${{ github.event.repository.name }}-${{ github.run_id }}\",\
              \"context\": \"${{ github.event.repository.name }}\",\
              \"commit_id\": \"${{ github.sha }}\",\
              \"build_status\": \"InProgress\",\
              \"build_plan_key\": \"${{ github.event.repository.name }}\",\
              \"build_number\": \"${{ github.run_id }}\",\
              \"git_url\": \"${{ github.event.repository.clone_url }}\"\
            }\
          }"

  docker-arti:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4.1.0

      - name: Build and Save Docker Image
        run: |
          IMAGE_NAME="my-complex-image"
          TAG="latest"
          docker build -t $IMAGE_NAME:$TAG .
          IMAGE_TAR="$IMAGE_NAME-$TAG.tar"
          docker save -o $IMAGE_TAR $IMAGE_NAME:$TAG

      - name: Upload Docker Image Artifact
        uses: actions/upload-artifact@v4.1.0
        with:
          name: docker-image-artifact
          path: $IMAGE_NAME-$TAG.tar

      - name: Use Docker Image Artifact
        uses: actions/download-artifact@v4.1.0
        with:
          name: docker-image-artifact

      - name: Load and Run Docker Image
        run: |
          IMAGE_TAR="my-complex-image-latest.tar"
          docker load -i $IMAGE_TAR
          docker run -d --name "my-complex-image-container" my-complex-image:latest

  docker-shell:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4.1.0

      - name: Docker Operations
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
        run: |
          echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin
          IMAGE_NAME="my-complex-image"
          REGISTRY_URL="docker.io/$DOCKER_USERNAME"
          TAG=$(date +%Y%m%d%H%M)
          docker pull "$REGISTRY_URL/$IMAGE_NAME:cache" || echo "No cache image found. Starting fresh build."
          docker build --target builder -t "$IMAGE_NAME:builder" . --cache-from "$REGISTRY_URL/$IMAGE_NAME:cache"
          docker run --rm "$IMAGE_NAME:builder" ./run-tests.sh || { echo "Tests failed"; exit 1; }
          docker build --target final -t "$IMAGE_NAME:$TAG" -t "$IMAGE_NAME:latest" --cache-from "$REGISTRY_URL/$IMAGE_NAME:cache" .
          docker tag "$IMAGE_NAME:$TAG" "$REGISTRY_URL/$IMAGE_NAME:$TAG"
          docker push "$REGISTRY_URL/$IMAGE_NAME:$TAG"
          docker-compose -f docker-compose.prod.yml up -d --build
          docker-compose -f docker-compose.prod.yml ps || { echo "Some containers failed to start"; exit 1; }
          docker-compose -f docker-compose.prod.yml down -v
          docker logout
