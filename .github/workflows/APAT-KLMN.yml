name: KLMN
on:
  push:
    branches:
      - main
  pull_request:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4.1.0
      - name: Setup Azure CLI
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      - name: Azure CLI Script
        run: |
          AZURE_SUBSCRIPTION_ID="12345678-1234-1234-1234-123456789abc"
          RESOURCE_GROUP="testResourceGroup"
          LOCATION="eastus"
          STORAGE_ACCOUNT_NAME="teststorageaccount$RANDOM"  # Adding random suffix to avoid conflicts
          CONTAINER_NAME="testcontainer"
          VNET_NAME="testVnet"
          SUBNET_NAME="testSubnet"
          ADDRESS_PREFIX="10.1.0.0/16"
          SUBNET_PREFIX="10.1.0.0/24"
          VM_NAME="testVM"
          VM_SIZE="Standard_B1s"
          ADMIN_USERNAME="azureuser"
          ADMIN_PASSWORD="ComplexPassword123!" # For testing only; use secure methods for production.
          # Login to Azure
          echo "Logging into Azure..."
          az login --service-principal -u $AZURE_CLIENT_ID -p $AZURE_CLIENT_SECRET --tenant $AZURE_TENANT_ID
          # Set the Azure subscription
          echo "Setting subscription to $AZURE_SUBSCRIPTION_ID..."
          az account set --subscription $AZURE_SUBSCRIPTION_ID
          # Create a resource group
          echo "Creating resource group $RESOURCE_GROUP in $LOCATION..."
          az group create --name $RESOURCE_GROUP --location $LOCATION
          # Create a storage account with advanced network rules
          echo "Creating storage account $STORAGE_ACCOUNT_NAME in resource group $RESOURCE_GROUP..."
          az storage account create \
              --name $STORAGE_ACCOUNT_NAME \
              --resource-group $RESOURCE_GROUP \
              --location $LOCATION \
              --sku Standard_LRS \
              --enable-hierarchical-namespace true \
              --allow-blob-public-access false \
              --kind StorageV2
          # Create a container within the storage account
          echo "Creating container $CONTAINER_NAME in storage account $STORAGE_ACCOUNT_NAME..."
          STORAGE_KEY=$(az storage account keys list --resource-group $RESOURCE_GROUP --account-name $STORAGE_ACCOUNT_NAME --query "[0].value" -o tsv)
          az storage container create --name $CONTAINER_NAME --account-name $STORAGE_ACCOUNT_NAME --account-key $STORAGE_KEY
          # Provision a virtual network and subnet
          echo "Creating virtual network $VNET_NAME and subnet $SUBNET_NAME..."
          az network vnet create \
              --resource-group $RESOURCE_GROUP \
              --name $VNET_NAME \
              --address-prefix $ADDRESS_PREFIX \
              --subnet-name $SUBNET_NAME \
              --subnet-prefix $SUBNET_PREFIX
          # Create a virtual machine
          echo "Creating virtual machine $VM_NAME in $RESOURCE_GROUP..."
          az vm create \
              --resource-group $RESOURCE_GROUP \
              --name $VM_NAME \
              --image UbuntuLTS \
              --size $VM_SIZE \
              --admin-username $ADMIN_USERNAME \
              --admin-password $ADMIN_PASSWORD \
              --vnet-name $VNET_NAME \
              --subnet $SUBNET_NAME \
              --generate-ssh-keys
          # Configure network security group rules
          echo "Configuring network security group rules for SSH access..."
          NSG_NAME="${VM_NAME}NSG"
          az network nsg rule create \
              --resource-group $RESOURCE_GROUP \
              --nsg-name $NSG_NAME \
              --name SSHAllowRule \
              --priority 1001 \
              --protocol Tcp \
              --destination-port-range 22 \
              --access Allow
          # Assign role-based access to storage account
          echo "Assigning Contributor role to the storage account..."
          STORAGE_ACCOUNT_ID=$(az storage account show --name $STORAGE_ACCOUNT_NAME --resource-group $RESOURCE_GROUP --query "id" -o tsv)
          az role assignment create \
              --assignee $AZURE_CLIENT_ID \
              --role "Storage Blob Data Contributor" \
              --scope $STORAGE_ACCOUNT_ID
          # Output the results of the resources created
          echo "Resources created successfully."
          echo "Resource Group: $RESOURCE_GROUP"
          echo "Storage Account: $STORAGE_ACCOUNT_NAME"
          echo "Virtual Network: $VNET_NAME"
          echo "Subnet: $SUBNET_NAME"
          echo "Virtual Machine: $VM_NAME"
          # Clean up (optional)
          echo "Cleaning up resources... Uncomment if needed."
          # az group delete --name $RESOURCE_GROUP --no-wait --yes
          echo "Azure CLI Script execution completed."
      - name: AWS CLI Script
        run: |
          AWS_REGION="us-east-1"
          AWS_PROFILE="test-profile"
          RESOURCE_TAG="BambooTestResource"
          VPC_NAME="TestVPC"
          SUBNET_NAME="TestSubnet"
          SECURITY_GROUP_NAME="TestSecurityGroup"
          INSTANCE_TYPE="t2.micro"
          KEY_NAME="TestKeyPair"
          S3_BUCKET_NAME="test-bamboo-s3-bucket-$RANDOM"
          echo "Configuring AWS CLI with profile $AWS_PROFILE and region $AWS_REGION..."
          aws configure set region $AWS_REGION --profile $AWS_PROFILE
          echo "Creating an S3 bucket: $S3_BUCKET_NAME..."
          aws s3api create-bucket --bucket $S3_BUCKET_NAME --region $AWS_REGION --create-bucket-configuration LocationConstraint=$AWS_REGION
          aws s3api put-public-access-block --bucket $S3_BUCKET_NAME --public-access-block-configuration BlockPublicAcls=true,IgnorePublicAcls=true,BlockPublicPolicy=true,RestrictPublicBuckets=true
          echo "Creating a new VPC: $VPC_NAME..."
          VPC_ID=$(aws ec2 create-vpc --cidr-block 10.0.0.0/16 --query 'Vpc.VpcId' --output text --profile $AWS_PROFILE)
          aws ec2 create-tags --resources $VPC_ID --tags Key=Name,Value=$VPC_NAME --profile $AWS_PROFILE
          echo "Creating a subnet: $SUBNET_NAME..."
          SUBNET_ID=$(aws ec2 create-subnet --vpc-id $VPC_ID --cidr-block 10.0.1.0/24 --query 'Subnet.SubnetId' --output text --profile $AWS_PROFILE)
          echo "Creating a security group: $SECURITY_GROUP_NAME..."
          SECURITY_GROUP_ID=$(aws ec2 create-security-group --group-name $SECURITY_GROUP_NAME --description "Security group for SSH access" --vpc-id $VPC_ID --query 'GroupId' --output text --profile $AWS_PROFILE)
          aws ec2 authorize-security-group-ingress --group-id $SECURITY_GROUP_ID --protocol tcp --port 22 --cidr 0.0.0.0/0 --profile $AWS_PROFILE
          echo "Launching an EC2 instance with security group and subnet..."
          aws ec2 run-instances \
              --image-id ami-1234567890abcdef0 \
              --instance-type $INSTANCE_TYPE \
              --key-name $KEY_NAME \
              --security-group-ids $SECURITY_GROUP_ID \
              --subnet-id $SUBNET_ID \
              --tag-specifications "ResourceType=instance,Tags=[{Key=Name,Value=$RESOURCE_TAG}]" \
              --profile $AWS_PROFILE
          echo "Resources created successfully:"
          echo "S3 Bucket: $S3_BUCKET_NAME"
          echo "VPC ID: $VPC_ID"
          echo "Subnet ID: $SUBNET_ID"
          echo "Security Group ID: $SECURITY_GROUP_ID"
          echo "AWS CLI Script execution completed."
      - name: Docker Image Build and Save
        run: |
          IMAGE_NAME="my-complex-image"
          TAG="latest"
          echo "Building Docker image: $IMAGE_NAME:$TAG..."
          docker build -t $IMAGE_NAME:$TAG .
          IMAGE_TAR="$IMAGE_NAME-$TAG.tar"
          echo "Saving Docker image to artifact: $IMAGE_TAR..."
          docker save -o $IMAGE_TAR $IMAGE_NAME:$TAG
          if [ -f "$IMAGE_TAR" ]; then
              echo "Docker image saved successfully: $IMAGE_TAR"
          else
              echo "Error: Failed to save Docker image."
              exit 1
          fi
      - name: Upload Docker Image Artifact
        uses: actions/upload-artifact@v4.1.0
        with:
          name: docker-image-artifact
          path: "my-complex-image-latest.tar"
      - name: Download Docker Image Artifact
        uses: actions/download-artifact@v4.1.0
        with:
          name: docker-image-artifact
          path: ./
      - name: Load Docker Image
        run: |
          IMAGE_NAME="my-complex-image"
          TAG="latest"
          IMAGE_TAR="$IMAGE_NAME-$TAG.tar"
          echo "Loading Docker image from artifact..."
          docker load -i $IMAGE_TAR
          echo "Running Docker container from loaded image..."
          docker run -d --name "$IMAGE_NAME-container" $IMAGE_NAME:$TAG
          echo "Verifying container status..."
          docker ps -f "name=$IMAGE_NAME-container"

  update_build_status:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4.1.0
      - name: Update Build Status
        run: |
          curl -v POST "${{ secrets.GITHUB_WEBHOOK_URL }}" \
            --header 'Accept: application/vnd.github+json' \
            --header 'x-github-token: ${{ secrets.GIT_HUB_TOKEN }}' \
            --header 'Content-Type: application/json' \
            --data "{\"event_type\": \"build_status\",\"client_payload\": {\"build_result_url\": \"https://bamboo.air-watch.com/browse/${{ github.workflow }}-${{ github.run_number }}\",\"context\": \"${{ github.job }}\",\"commit_id\": \"${{ github.sha }}\",\"build_status\": \"InProgress\",\"build_plan_key\": \"${{ github.workflow }}\",\"build_number\": \"${{ github.run_number }}\",\"git_url\": \"${{ github.event.repository.clone_url }}\"}}"
