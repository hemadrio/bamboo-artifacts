name: KLMN Pipeline

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build-test-publish:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          clean: false

      - name: Azure CLI Script
        env:
          AZURE_SUBSCRIPTION_ID: '12345678-1234-1234-1234-123456789abc'
          RESOURCE_GROUP: 'testResourceGroup'
          LOCATION: 'eastus'
          STORAGE_ACCOUNT_NAME: 'teststorageaccount${{ github.run_id }}'
          CONTAINER_NAME: 'testcontainer'
          VNET_NAME: 'testVnet'
          SUBNET_NAME: 'testSubnet'
          ADDRESS_PREFIX: '10.1.0.0/16'
          SUBNET_PREFIX: '10.1.0.0/24'
          VM_NAME: 'testVM'
          VM_SIZE: 'Standard_B1s'
          ADMIN_USERNAME: 'azureuser'
          ADMIN_PASSWORD: 'ComplexPassword123!'
          AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          AZURE_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
          AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
        run: |
          echo "Logging into Azure..."
          az login --service-principal -u $AZURE_CLIENT_ID -p $AZURE_CLIENT_SECRET --tenant $AZURE_TENANT_ID

          echo "Setting subscription to $AZURE_SUBSCRIPTION_ID..."
          az account set --subscription $AZURE_SUBSCRIPTION_ID

          echo "Creating resource group $RESOURCE_GROUP in $LOCATION..."
          az group create --name $RESOURCE_GROUP --location $LOCATION

          echo "Creating storage account $STORAGE_ACCOUNT_NAME in resource group $RESOURCE_GROUP..."
          az storage account create \
              --name $STORAGE_ACCOUNT_NAME \
              --resource-group $RESOURCE_GROUP \
              --location $LOCATION \
              --sku Standard_LRS \
              --enable-hierarchical-namespace true \
              --allow-blob-public-access false \
              --kind StorageV2

          echo "Creating container $CONTAINER_NAME in storage account $STORAGE_ACCOUNT_NAME..."
          STORAGE_KEY=$(az storage account keys list --resource-group $RESOURCE_GROUP --account-name $STORAGE_ACCOUNT_NAME --query "[0].value" -o tsv)
          az storage container create --name $CONTAINER_NAME --account-name $STORAGE_ACCOUNT_NAME --account-key $STORAGE_KEY

          echo "Creating virtual network $VNET_NAME and subnet $SUBNET_NAME..."
          az network vnet create \
              --resource-group $RESOURCE_GROUP \
              --name $VNET_NAME \
              --address-prefix $ADDRESS_PREFIX \
              --subnet-name $SUBNET_NAME \
              --subnet-prefix $SUBNET_PREFIX

          echo "Creating virtual machine $VM_NAME in $RESOURCE_GROUP..."
          az vm create \
              --resource-group $RESOURCE_GROUP \
              --name $VM_NAME \
              --image UbuntuLTS \
              --size $VM_SIZE \
              --admin-username $ADMIN_USERNAME \
              --admin-password $ADMIN_PASSWORD \
              --vnet-name $VNET_NAME \
              --subnet $SUBNET_NAME \
              --generate-ssh-keys

      - name: AWS CLI Script
        env:
          AWS_REGION: 'us-east-1'
          AWS_PROFILE: 'test-profile'
          RESOURCE_TAG: 'BambooTestResource'
          VPC_NAME: 'TestVPC'
          SUBNET_NAME: 'TestSubnet'
          SECURITY_GROUP_NAME: 'TestSecurityGroup'
          INSTANCE_TYPE: 't2.micro'
          KEY_NAME: 'TestKeyPair'
        run: |
          echo "Configuring AWS CLI with profile $AWS_PROFILE and region $AWS_REGION..."
          aws configure set region $AWS_REGION --profile $AWS_PROFILE

          echo "Creating an S3 bucket: $S3_BUCKET_NAME..."
          aws s3api create-bucket --bucket $S3_BUCKET_NAME --region $AWS_REGION --create-bucket-configuration LocationConstraint=$AWS_REGION
          aws s3api put-public-access-block --bucket $S3_BUCKET_NAME --public-access-block-configuration BlockPublicAcls=true,IgnorePublicAcls=true,BlockPublicPolicy=true,RestrictPublicBuckets=true

      - name: Google Cloud CLI Script
        env:
          PROJECT_ID: 'test-project'
          ZONE: 'us-central1-a'
          NETWORK_NAME: 'test-network'
          SUBNET_NAME: 'test-subnet'
          VM_NAME: 'test-vm'
          MACHINE_TYPE: 'n1-standard-1'
          GOOGLE_APPLICATION_CREDENTIALS: ${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}
        run: |
          echo "Authenticating with Google Cloud..."
          gcloud auth activate-service-account --key-file="$GOOGLE_APPLICATION_CREDENTIALS"

          echo "Setting Google Cloud project to $PROJECT_ID..."
          gcloud config set project $PROJECT_ID

          echo "Creating a Cloud Storage bucket: $BUCKET_NAME..."
          gcloud storage buckets create gs://$BUCKET_NAME --project $PROJECT_ID --location $ZONE --uniform-bucket-level-access

  update-build-status:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          clean: true

      - name: Update GitHub Build Status
        run: |
          curl -v POST "${{ secrets.GITHUB_WEBHOOK_URL }}" \
                  --header 'Accept: application/vnd.github+json' \
                  --header 'x-github-token: ${{ secrets.GITHUB_TOKEN }}' \
                  --header 'Content-Type: application/json' \
                  --data "{\n                    \"event_type\": \"build_status\",\n                    \"client_payload\": {\n                      \"build_result_url\": \"https://bamboo.air-watch.com/browse/${{ github.run_id }}\",\n                      \"context\": \"KLMN\",\n                      \"commit_id\": \"${{ github.sha }}\",\n                      \"build_status\": \"InProgress\",\n                      \"build_plan_key\": \"KLMN\",\n                      \"build_number\": \"${{ github.run_number }}\",\n                      \"git_url\": \"${{ github.repository_url }}\"\n                    }\n                  }"

  docker-arti:
    runs-on: ubuntu-latest
    steps:
      - name: Build Docker Image
        run: |
          IMAGE_NAME="my-complex-image"
          TAG="latest"
          echo "Building Docker image: $IMAGE_NAME:$TAG..."
          docker build -t $IMAGE_NAME:$TAG .

      - name: Save Docker Image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: false
          tags: $IMAGE_NAME:$TAG

      - name: Use Docker Image
        run: |
          IMAGE_NAME="my-complex-image"
          TAG="latest"
          echo "Downloading Docker image artifact..."
          docker load -i "${{ github.workspace }}/docker-image-artifact/$IMAGE_NAME-$TAG.tar"
          echo "Running Docker container from loaded image..."
          docker run -d --name "$IMAGE_NAME-container" $IMAGE_NAME:$TAG

  docker-shell:
    runs-on: ubuntu-latest
    steps:
      - name: Docker Complex Operations
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
          IMAGE_NAME: 'my-complex-image'
          REGISTRY_URL: 'docker.io/${{ secrets.DOCKER_USERNAME }}'
        run: |
          echo "Logging into Docker Hub..."
          echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin

          echo "Building Docker image with multi-stage builds and caching..."
          docker pull "$REGISTRY_URL/$IMAGE_NAME:cache" || echo "No cache image found. Starting fresh build."
          docker build --target builder -t "$IMAGE_NAME:builder" . \
              --cache-from "$REGISTRY_URL/$IMAGE_NAME:cache" \
              --build-arg CACHEBUST=$(date +%s)

          echo "Finalizing production build..."
          docker build --target final -t "$IMAGE_NAME:$TAG" -t "$IMAGE_NAME:latest" \
              --cache-from "$REGISTRY_URL/$IMAGE_NAME:cache" .

          echo "Tagging and pushing images..."
          docker tag "$IMAGE_NAME:$TAG" "$REGISTRY_URL/$IMAGE_NAME:$TAG"
          docker tag "$IMAGE_NAME:latest" "$REGISTRY_URL/$IMAGE_NAME:latest"

          docker push "$REGISTRY_URL/$IMAGE_NAME:$TAG"
          docker push "$REGISTRY_URL/$IMAGE_NAME:latest"

          echo "Cleaning up old Docker images..."
          docker image prune -f

          echo "Starting multi-container environment using Docker Compose..."
          docker-compose -f docker-compose.prod.yml up -d --build

          echo "Checking container status..."
          docker-compose -f docker-compose.prod.yml ps || { echo "Some containers failed to start"; exit 1; }

          echo "Extracting logs for analysis..."
          docker-compose -f docker-compose.prod.yml logs > docker_logs_$(date +%Y%m%d%H%M).log

          echo "Shutting down the environment..."
          docker-compose -f docker-compose.prod.yml down -v

          echo "Logging out from Docker Hub..."
          docker logout
