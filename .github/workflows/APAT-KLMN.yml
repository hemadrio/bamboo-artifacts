name: Bamboo Plan Conversion

on:
  push:
    branches:
      - main

jobs:
  build-test-publish:
    runs-on: ubuntu-custom-runner
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Azure CLI Script Execution
        env:
          AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          AZURE_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
          AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
        run: |
          # Azure CLI script here

      - name: AWS CLI Script Execution
        env:
          AWS_REGION: us-east-1
          AWS_PROFILE: test-profile
        run: |
          # AWS CLI script here

      - name: Google Cloud CLI Script Execution
        env:
          GOOGLE_APPLICATION_CREDENTIALS: ${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}
        run: |
          # Google Cloud CLI script here

  update-build-status:
    runs-on: ubuntu-custom-runner
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Update Build Status
        run: |
          curl -v POST "${{ secrets.GITHUB_WEBHOOK_URL }}" \
                --header 'Accept: application/vnd.github+json' \
                --header 'x-github-token: ${{ secrets.GITHUB_TOKEN }}' \
                --header 'Content-Type: application/json' \
                --data '{ "event_type": "build_status", "client_payload": { "build_result_url": "https://bamboo.air-watch.com/browse/${GITHUB_REF}-${GITHUB_RUN_NUMBER}", "context": "${GITHUB_JOB}", "commit_id": "${GITHUB_SHA}", "build_status": "InProgress", "build_plan_key": "${GITHUB_REF}", "build_number": "${GITHUB_RUN_NUMBER}", "git_url": "${GITHUB_REPOSITORY}" } }'

  docker-arti:
    runs-on: ubuntu-custom-runner
    steps:
      - name: Build and Save Docker Image
        run: |
          IMAGE_NAME="my-complex-image"
          TAG="latest"
          docker build -t $IMAGE_NAME:$TAG .
          IMAGE_TAR="$IMAGE_NAME-$TAG.tar"
          docker save -o $IMAGE_TAR $IMAGE_NAME:$TAG

      - name: Upload Docker Image Artifact
        uses: actions/upload-artifact@v4
        with:
          name: docker-image-artifact
          path: $IMAGE_TAR
          if-no-files-found: ignore

  docker-shell:
    runs-on: ubuntu-custom-runner
    steps:
      - name: Docker Shell Operations
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
        run: |
          echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin
          IMAGE_NAME="my-complex-image"
          TAG=$(date +%Y%m%d%H%M)
          docker build --target builder -t "$IMAGE_NAME:builder" .
          docker run --rm "$IMAGE_NAME:builder" ./run-tests.sh || { echo "Tests failed"; exit 1; }
          docker build --target final -t "$IMAGE_NAME:$TAG" -t "$IMAGE_NAME:latest" .
          docker tag "$IMAGE_NAME:$TAG" "docker.io/$DOCKER_USERNAME/$IMAGE_NAME:$TAG"
          docker push "docker.io/$DOCKER_USERNAME/$IMAGE_NAME:$TAG"
          docker push "docker.io/$DOCKER_USERNAME/$IMAGE_NAME:latest"
          docker-compose -f docker-compose.prod.yml up -d --build
          docker-compose -f docker-compose.prod.yml ps || { echo "Some containers failed to start"; exit 1; }
          docker-compose -f docker-compose.prod.yml down -v
          docker logout
