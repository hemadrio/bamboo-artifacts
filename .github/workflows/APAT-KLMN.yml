name: Bamboo Plan Conversion to GitHub Actions

on:
  push:
    branches:
      - main

jobs:
  build-test-publish:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4.1.0

      - name: Setup Azure
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Azure CLI Operations
        run: |
          # Azure CLI Script
          AZURE_SUBSCRIPTION_ID="12345678-1234-1234-1234-123456789abc"
          RESOURCE_GROUP="testResourceGroup"
          LOCATION="eastus"
          # Define other environment variables...
          az login --service-principal -u $AZURE_CLIENT_ID -p $AZURE_CLIENT_SECRET --tenant $AZURE_TENANT_ID
          az account set --subscription $AZURE_SUBSCRIPTION_ID
          # Execute Azure CLI operations...

      - name: AWS CLI Operations
        run: |
          # AWS CLI Script
          AWS_REGION="us-east-1"
          # Define other environment variables...
          aws configure set region $AWS_REGION --profile $AWS_PROFILE
          # Execute AWS CLI operations...

      - name: Google Cloud CLI Operations
        run: |
          # Google Cloud CLI Script
          PROJECT_ID="test-project"
          # Define other environment variables...
          gcloud auth activate-service-account --key-file="$GOOGLE_APPLICATION_CREDENTIALS"
          gcloud config set project $PROJECT_ID
          # Execute Google Cloud operations...

      - name: Update Build Status
        run: |
          curl -v POST "${{ secrets.GITHUB_WEBHOOK_URL }}" \
            --header 'Accept: application/vnd.github+json' \
            --header 'x-github-token: ${{ secrets.GITHUB_TOKEN }}' \
            --header 'Content-Type: application/json' \
            --data "{ \"event_type\": \"build_status\", \"client_payload\": { \"build_result_url\": \"https://bamboo.air-watch.com/browse/${{ github.run_id }}\", \"context\": \"${{ github.workflow }}\", \"commit_id\": \"${{ github.sha }}\", \"build_status\": \"InProgress\" } }"

      - name: Build Docker Image
        run: |
          IMAGE_NAME="my-complex-image"
          TAG="latest"
          docker build -t $IMAGE_NAME:$TAG .
          IMAGE_TAR="$IMAGE_NAME-$TAG.tar"
          docker save -o $IMAGE_TAR $IMAGE_NAME:$TAG

      - name: Upload Docker Image Artifact
        uses: actions/upload-artifact@v4.1.0
        with:
          name: docker-image-artifact
          path: $IMAGE_TAR

      - name: Use Docker Image Artifact
        run: |
          IMAGE_NAME="my-complex-image"
          TAG="latest"
          IMAGE_TAR="$IMAGE_NAME-$TAG.tar"
          docker load -i $IMAGE_TAR
          docker run -d --name "$IMAGE_NAME-container" $IMAGE_NAME:$TAG

      - name: Clean Up
        run: |
          docker image prune -f

  docker-shell:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4.1.0

      - name: Docker Operations
        run: |
          DOCKER_USERNAME="your_docker_username"
          DOCKER_PASSWORD="${{ secrets.DOCKER_PASSWORD }}"
          IMAGE_NAME="my-complex-image"
          REGISTRY_URL="docker.io/$DOCKER_USERNAME"
          TAG=$(date +%Y%m%d%H%M)
          CACHE_IMAGE="$REGISTRY_URL/$IMAGE_NAME:cache"

          echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin
          docker pull "$CACHE_IMAGE" || echo "No cache image found. Starting fresh build."
          docker build --target builder -t "$IMAGE_NAME:builder" . --cache-from "$CACHE_IMAGE"
          docker run --rm "$IMAGE_NAME:builder" ./run-tests.sh || { echo "Tests failed"; exit 1; }
          docker build --target final -t "$IMAGE_NAME:$TAG" -t "$IMAGE_NAME:latest" --cache-from "$CACHE_IMAGE" .
          docker tag "$IMAGE_NAME:$TAG" "$REGISTRY_URL/$IMAGE_NAME:$TAG"
          docker tag "$IMAGE_NAME:latest" "$REGISTRY_URL/$IMAGE_NAME:latest"
          docker push "$REGISTRY_URL/$IMAGE_NAME:$TAG"
          docker push "$REGISTRY_URL/$IMAGE_NAME:latest"
          docker-compose -f docker-compose.prod.yml up -d --build
          docker-compose -f docker-compose.prod.yml ps || { echo "Some containers failed to start"; exit 1; }
          docker-compose -f docker-compose.prod.yml logs > docker_logs_$(date +%Y%m%d%H%M).log
          docker-compose -f docker-compose.prod.yml down -v
          docker logout
