name: KLMN
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
jobs:
  build:
    runs-on: ubuntu-custom-runner
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Azure CLI
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Azure CLI Script
        run: |
          AZURE_SUBSCRIPTION_ID="12345678-1234-1234-1234-123456789abc"
          RESOURCE_GROUP="testResourceGroup"
          LOCATION="eastus"
          STORAGE_ACCOUNT_NAME="teststorageaccount$RANDOM"
          CONTAINER_NAME="testcontainer"
          VNET_NAME="testVnet"
          SUBNET_NAME="testSubnet"
          ADDRESS_PREFIX="10.1.0.0/16"
          SUBNET_PREFIX="10.1.0.0/24"
          VM_NAME="testVM"
          VM_SIZE="Standard_B1s"
          ADMIN_USERNAME="azureuser"
          ADMIN_PASSWORD="ComplexPassword123!"
          az login --service-principal -u $AZURE_CLIENT_ID -p $AZURE_CLIENT_SECRET --tenant $AZURE_TENANT_ID
          az account set --subscription $AZURE_SUBSCRIPTION_ID
          az group create --name $RESOURCE_GROUP --location $LOCATION
          az storage account create --name $STORAGE_ACCOUNT_NAME --resource-group $RESOURCE_GROUP --location $LOCATION --sku Standard_LRS --enable-hierarchical-namespace true --allow-blob-public-access false --kind StorageV2

      - name: AWS CLI Setup
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: AWS CLI Script
        run: |
          AWS_REGION="us-east-1"
          AWS_PROFILE="test-profile"
          RESOURCE_TAG="BambooTestResource"
          VPC_NAME="TestVPC"
          SUBNET_NAME="TestSubnet"
          SECURITY_GROUP_NAME="TestSecurityGroup"
          INSTANCE_TYPE="t2.micro"
          KEY_NAME="TestKeyPair"
          S3_BUCKET_NAME="test-bamboo-s3-bucket-$RANDOM"
          aws s3api create-bucket --bucket $S3_BUCKET_NAME --region $AWS_REGION --create-bucket-configuration LocationConstraint=$AWS_REGION
          aws s3api put-public-access-block --bucket $S3_BUCKET_NAME --public-access-block-configuration BlockPublicAcls=true,IgnorePublicAcls=true,BlockPublicPolicy=true,RestrictPublicBuckets=true

      - name: Google Cloud CLI Setup
        uses: google-github-actions/setup-gcloud@v0
        with:
          project_id: test-project
          service_account_key: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}
          export_default_credentials: true

      - name: Google Cloud CLI Script
        run: |
          PROJECT_ID="test-project"
          ZONE="us-central1-a"
          NETWORK_NAME="test-network"
          SUBNET_NAME="test-subnet"
          VM_NAME="test-vm"
          MACHINE_TYPE="n1-standard-1"
          BUCKET_NAME="test-bamboo-bucket-$RANDOM"
          gcloud config set project $PROJECT_ID
          gcloud storage buckets create gs://$BUCKET_NAME --project $PROJECT_ID --location $ZONE --uniform-bucket-level-access

      - name: Docker Login
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Docker Build and Push
        run: |
          IMAGE_NAME="my-complex-image"
          TAG=$(date +%Y%m%d%H%M)
          REGISTRY_URL="docker.io/${{ secrets.DOCKER_USERNAME }}"
          docker build -t $IMAGE_NAME:$TAG .
          docker tag $IMAGE_NAME:$TAG $REGISTRY_URL/$IMAGE_NAME:$TAG
          docker push $REGISTRY_URL/$IMAGE_NAME:$TAG

      - name: Docker Compose Up
        run: |
          docker-compose -f docker-compose.prod.yml up -d --build

      - name: Publish Test Results
        uses: EnricoMi/publish-unit-test-result-action@v2
        with:
          files: '**/test-reports/*.xml'
          check_name: JUnit Test Results

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: artifact-option
          path: target/*.*
          if-no-files-found: error

  update-status:
    runs-on: ubuntu-custom-runner
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Update Build Status
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          curl -v POST "${{ secrets.GITHUB_WEBHOOK_URL }}" \
            --header 'Accept: application/vnd.github+json' \
            --header 'Authorization: token ${{ secrets.GITHUB_TOKEN }}' \
            --header 'Content-Type: application/json' \
            --data "{\n              \"event_type\": \"build_status\",\n              \"client_payload\": {\n                \"build_result_url\": \"https://bamboo.air-watch.com/browse/${{ github.run_id }}\",\n                \"context\": \"${{ github.workflow }}\",\n                \"commit_id\": \"${{ github.sha }}\",\n                \"build_status\": \"InProgress\",\n                \"build_plan_key\": \"${{ github.event.workflow_run.conclusion }}\",\n                \"build_number\": \"${{ github.run_number }}\",\n                \"git_url\": \"${{ github.repository_url }}\"\n              }\n            }"
